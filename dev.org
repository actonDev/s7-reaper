#+PROPERTY: header-args:sh :session *reaper-repl*

* Linux
** Optional: symlinks
   #+BEGIN_SRC sh
ln -s `readlink -f ../iPlug2` subprojects/iPlug2
ln -s `readlink -f ../s7-imgui` subprojects/s7_imgui
ln -s `readlink -f ../s7` subprojects/s7
ln -s `readlink -f ../imgui` subprojects/imgui
ln -s `readlink -f ../SFML` subprojects/SFML

# TODO the s7-imgui should accept flags about which features we want
# for example, I don't need the native-file-dialog here
ln -s `readlink -f ../nativefiledialog` subprojects/nfd
   #+END_SRC

** COMMENT TEMP: s7svn
   #+BEGIN_SRC sh
ln -s `readlink -f ../s7` subprojects/s7
rm subprojects/s7
ln -s `readlink -f ../s7svn/trunk` subprojects/s7
ls subprojects/s7
   #+END_SRC

** Necessary symlinks (or copy)
   Necessary s7-imgui scheme files: contain imgui macros etc.
   #+BEGIN_SRC sh
# old way: just linking the s7-imgui aod/ scheme folder
# but.. I'm adding new functionality there (eg the freesound api)
# ln -s `readlink -f subprojects/s7_imgui/src/scheme/aod` src/scheme/aod

ln -s `readlink -f subprojects/s7_imgui/src/scheme/` src/scheme/s7-imgui
# when the extension is "installed", it will search for a subdir "s7-reaper" for the scheme files
ln -s `readlink -f src/scheme/` build/s7-reaper
# validate
ls build/s7-reaper -alL

# shared libraries
mkdir build/s7-reaper-lib
ln -s `readlink -f build/subprojects/curl/libcm_libcurl.so` build/s7-reaper-lib/
   #+END_SRC

** Building
   #+BEGIN_SRC sh
meson setup build
meson setup --reconfigure build
ninja -C build
meson setup --wipe build
# to cleanup/regenerate
rm -rf build
   #+END_SRC
** Launching REAPER
   (pardon the hardcoded reaper path for now)
   #+BEGIN_SRC sh
# installing
ln -s `readlink -f build/reaper_s7-reaper.so` ~/Downloads/reaper_linux_x86_64/REAPER/Plugins
# scheme files: available in Plugins/s7-reaper
ln -s `readlink -f src/scheme/` ~/Downloads/reaper_linux_x86_64/REAPER/Plugins/s7-reaper

# ooor, alternatively
ln -s `readlink -f build/reaper_s7-reaper.so` ~/.config/REAPER/UserPlugins
ln -s `readlink -f src/scheme/` ~/.config/REAPER/UserPlugins/s7-reaper
# for shared libraries (eg curl from cmake..)
ln -s `readlink -f build/s7-reaper-lib/` ~/.config/REAPER/UserPlugins/s7-reaper-lib

~/Downloads/reaper_linux_x86_64/REAPER/reaper

~/Downloads/reaper_linux_x86_64/REAPER/reaper test/demo-regions.rpp
   #+END_SRC
** COMMENT linked (shared) libraries
   #+BEGIN_SRC sh
objdump -p build/reaper_s7-reaper.so   
   #+END_SRC

** Testing the socket (REPL)
   #+NAME: >repl
   #+BEGIN_SRC emacs-lisp
(save-selected-window
  (run-scheme "netcat localhost 1234")
  ;; sending something to see if the repl process is alive
  (scheme-send-string "\n"))
   #+END_SRC

   #+CALL: >repl()

   #+RESULTS:

   #+BEGIN_SRC scheme
(+ 1 2 3)

;; insert new track 40001
((rpr 'Main_OnCommand) 40001)
;; select all 40296
((rpr 'Main_OnCommand) 40296)
;; remove
((rpr 'Main_OnCommand) 40005)

(ns-require rpr :as rpr)
(rpr/Main_OnCommand 40001)
(rpr/count-tracks)
(rpr/CountSelectedMediaItems)
(rpr/GetSelectedMediaItem 0)

(define x (rpr/GetSelectedMediaItem 0))
x

(rpr/SetMediaItemSelected x #t)
(rpr/UpdateArrange)
   #+END_SRC

** Zip tar build bundle
   #+BEGIN_SRC sh
tar -czvf s7-reaper.tar.gz -C build --dereference --exclude=.gitignore reaper_s7-reaper.so s7-reaper
   #+END_SRC

*** COMMENT versioned
    #+BEGIN_SRC sh :var version=(read-string "version: ") :results silent
tar -czvf "s7-reaper_linux_${version}.tar.gz" -C build --dereference --exclude=.gitignore reaper_s7-reaper.so s7-reaper
    #+END_SRC
* Windows
** Setup & build project
   #+BEGIN_SRC sh :session *s7-reaper-vs*
cmd //k "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" x64

meson setup build --backend vs
meson compile -C build

# useful commands
meson setup build --reconfigure --backend vs
meson setup build --wipe --backend vs
rm -rf build
   #+END_SRC

** Necessary symlinks 
   #+BEGIN_SRC sh :session *s7-reaper-vs*
cmd
mklink /J src\scheme\aod subprojects\s7_imgui\src\scheme\aod
mklink /J build\s7-reaper src\scheme
exit
   #+END_SRC
** Launching REAPER
   (pardon the hardcoded reaper path for now)
   #+BEGIN_SRC sh :session *s7-reaper-vs*

ln -s `readlink -f build/reaper_s7-reaper.so` ~/Downloads/reaper_linux_x86_64/REAPER/Plugins
# scheme files: available in Plugins/s7-reaper
ln -s `readlink -f src/scheme/` ~/Downloads/reaper_linux_x86_64/REAPER/Plugins/s7-reaper

~/Downloads/reaper_linux_x86_64/REAPER/reaper

~/Downloads/reaper_linux_x86_64/REAPER/reaper test/demo-regions.rpp
   #+END_SRC


   #+BEGIN_SRC sh :session *s7-reaper-cmd*
cmd
# fuck that's not working, do it by hand
mklink W:\DAW\Reaper\Plugins\reaper_s7-reaper.dll build\reaper_s7-reaper.dll

mklink /J W:\DAW\Reaper\Plugins\s7-reaper src\scheme
mklink /h
W:\DAW\Reaper\reaper.exe

exit
cp build/reaper_s7-reaper.dll /w/DAW/Reaper/Plugins/
/w/DAW/Reaper/reaper
   #+END_SRC
** Zip build bundle
   #+BEGIN_SRC sh
cd build && zip ../s7-reaper.zip -r reaper_s7-reaper.dll s7-reaper -x "*.gitignore" && cd ..
   #+END_SRC
*** COMMENT versioned
    #+BEGIN_SRC sh :var version=(read-string "version: ") :results silent
cd build && zip "../s7-reaper_win_${version}.zip" -r reaper_s7-reaper.dll s7-reaper -x "*.gitignore" && cd ..
    #+END_SRC
* COMMENT Local variables
  # Local Variables:
  # eval: (aod.org-babel/generate-call-buttons)
  # eval: (setq-local org-confirm-babel-evaluate nil)
  # End:  
